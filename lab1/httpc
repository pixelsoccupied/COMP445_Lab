#!/usr/bin/python
#Example Usage
#python httpc.py get -u 'http://httpbin.org/get?course=networking&assignment=1%27'
#python httpc.py get -hd Accept:application/json -v -u 'http://httpbin.org/get?course=networking&assignment=1%27'
#httpc.py post -hd Accept:application/json -v -f 'test.txt' -u 'http://httpbin.org/post'
#httpc.py post -hd Accept:application/json -v -d '{"test":"test"}' -u 'http://httpbin.org/post' -o 'output.txt'

from socket import *
import argparse
import sys
from urlparse import urlparse
import json
from urllib import urlencode

def run_client(args):
    #print args
    request_string = ""

    if not validate_url(args.url):
        return None

    if args.which == "get":
        request_string = build_get(args)
    elif args.which == "post":
        request_string = build_post(args)
    else:
        print "Method was not recognized"
        return None
    conn = socket(AF_INET, SOCK_STREAM)
    try:
        conn.connect((args.url.netloc, args.port))
        #print request_string
        conn.send(request_string)
        response = conn.recv(1024)
        if args.output_file:
            o = open(args.output_file, 'w')
            o.write(response.split("\r\n\r\n", 1)[1])
            o.close()
        print response
        response = build_verbose(args, response)
        print "** Server Response **"
        print response
    finally:
        conn.close()

def build_get(args):
    query_params = ""
    if not args.url.query == "":
        query_params = "?" + args.url.query
    request_string = "GET " + args.url.path + query_params + " HTTP/1.0" + build_headers(args) + "\r\n\r\n"
    return request_string

def build_post(args):
    body = ""
    if args.data:
        body = json.dumps(args.data)
    if args.file:
        with open(args.file, 'r') as f:
            body = f.read()
    args.headers.extend(["Content-Type:application/json", "Content-Length: "+str(len(body))])
    request_string = "POST " + args.url.path + " HTTP/1.0" + build_headers(args) + "\r\n\r\n"+body

    return request_string

def build_headers(args):
    header_string = "\nHOST: " + args.url.netloc
    if len(args.headers) > 0:
        for head in args.headers:
            split_head = head.split(":")
            if len(split_head) == 2:
                header_string = header_string + "\r\n" + split_head[0] + ": " + split_head[1]
    return header_string

def build_verbose(args, response):
    #print repr(response)
    #return response

    if args.verbose == False:
        return response.split("\r\n\r\n", 1)[1]
    else:
        return response

def validate_url(url):
    if url.netloc == "":
        return False
    else:
        return True

#Build the argument parser
parser = argparse.ArgumentParser(description="httpc is a curl-like application but supports HTTP protocol only.")
subparsers = parser.add_subparsers(help='commands')
get_parser = subparsers.add_parser('get', help='Executes a HTTP GET request and prints the response.')
get_parser.add_argument("-p", action='store', dest="port", type=int, default=8080, help="Set the server port")
get_parser.add_argument("-v", action='store_true', dest="verbose", default=False, help="Prints the detail of the response such as protocol, status, and headers.")
get_parser.add_argument("-hd", action="store", nargs='*', dest="headers", default=[], help="Associates headers to HTTP Request with the format 'key:value'.")
get_parser.add_argument("-u", action="store", dest="url", type=urlparse, required=True, help="Requested URL")
get_parser.add_argument("-o", action="store", dest="output_file", default="", help="Output the body to a file", required=False)
get_parser.set_defaults(which='get')

post_parser = subparsers.add_parser('post', help='Executes a HTTP POST request and prints the response.')
post_parser.add_argument("-p", action='store', dest="port", type=int, default=8080, help="Set the server port")
post_parser.add_argument("-v", action='store_true', dest="verbose", default=False, help="Prints the detail of the response such as protocol, status, and headers.")
post_parser.add_argument("-hd", action="store", nargs='*', dest="headers", default=[], help="Associates headers to HTTP Request with the format 'key:value'.")
group = post_parser.add_mutually_exclusive_group(required=False)
group.add_argument("-f", action="store", dest="file", default="", help="Associates the content of a file to the body HTTP.")
group.add_argument("-d", action="store", dest="data", type=json.loads, default='{}', help="Associates an inline data to the body HTTP POST.")
post_parser.add_argument("-u", action="store", dest="url", type=urlparse, required=True, help="Requested URL")
post_parser.add_argument("-o", action="store", dest="output_file", default="", help="Output the body to a file", required=False)
post_parser.set_defaults(which='post')

args = parser.parse_args()
run_client(args)

#https://pymotw.com/2/argparse/
